<?phpif(!function_exists('wd_product_by_sku_function')){	function wd_prodcut_by_sku_function($sku){		$_actived = apply_filters( 'active_plugins', get_option( 'active_plugins' )  );		if ( !in_array( "woocommerce/woocommerce.php", $_actived ) ) {			return;		}				wp_reset_query(); 		$big_args = array(			'post_type' => 'product',			'posts_per_page' => 1,			'no_found_rows' => 1,			'post_status' => 'publish',			'meta_query' => array(				array(					'key' => '_visibility',					'value' => array('catalog', 'visible'),					'compare' => 'IN'				)				,array(					'key' => '_sku',					'value' => $sku ,					'compare' => '='				)			)		);				$big_product = new WP_Query( $big_args );		if ( $big_product->have_posts() ) : 			global $post;			$big_product->the_post();			$product = get_product( $post->ID );			return $product;		endif;		return NULL;			}}if(!function_exists('wd_product_by_id_function')){	function wd_product_by_id_function($id){		$_actived = apply_filters( 'active_plugins', get_option( 'active_plugins' )  );		if ( !in_array( "woocommerce/woocommerce.php", $_actived ) ) {			return;		}		wp_reset_query(); 		$big_args = array(			'post_type' => 'product',			'posts_per_page' => 1,			'no_found_rows' => 1,			'post__in' => array($id),			'post_status' => 'publish',			'meta_query' => array(				array(					'key' => '_visibility',					'value' => array('catalog', 'visible'),					'compare' => 'IN'				)			)		);		$big_product = new WP_Query( $big_args );		if ( $big_product->have_posts() ) : 			global $post;			$big_product->the_post();			$product = get_product( $post->ID );			return $product;		endif;		return NULL;			}}function is_IE8(){	$u = $_SERVER['HTTP_USER_AGENT'];		$isIE8  = (bool)preg_match('/msie 8./i', $u );			return $isIE8;}function is_IE7(){	$u = $_SERVER['HTTP_USER_AGENT'];	$isIE7  = (bool)preg_match('/msie 7./i', $u );			return $isIE7;}add_filter('wpb_widget_title', 'override_widget_title', 10, 2);function override_widget_title($output = '', $params = array('')) {  $extraclass = (isset($params['extraclass'])) ? " ".$params['extraclass'] : "";  return '<h4 class="entry-title'.$extraclass.'">'.$params['title'].'</h4>';}if (!function_exists('getFontAwesomeIconArray')){	function getFontAwesomeIconArray(){				$icons = array (			'fa-adjust' => '\f042',			'fa-adn' => '\f170',			'fa-align-center' => '\f037',			'fa-align-justify' => '\f039',			'fa-align-left' => '\f036',			'fa-align-right' => '\f038',			'fa-ambulance' => '\f0f9',			'fa-anchor' => '\f13d',			'fa-android' => '\f17b',			'fa-angle-double-down' => '\f103',			'fa-angle-double-left' => '\f100',			'fa-angle-double-right' => '\f101',			'fa-angle-double-up' => '\f102',			'fa-angle-down' => '\f107',			'fa-angle-left' => '\f104',			'fa-angle-right' => '\f105',			'fa-angle-up' => '\f106',			'fa-apple' => '\f179',			'fa-archive' => '\f187',			'fa-arrow-circle-down' => '\f0ab',			'fa-arrow-circle-left' => '\f0a8',			'fa-arrow-circle-o-down' => '\f01a',			'fa-arrow-circle-o-left' => '\f190',			'fa-arrow-circle-o-right' => '\f18e',			'fa-arrow-circle-o-up' => '\f01b',			'fa-arrow-circle-right' => '\f0a9',			'fa-arrow-circle-up' => '\f0aa',			'fa-arrow-down' => '\f063',			'fa-arrow-left' => '\f060',			'fa-arrow-right' => '\f061',			'fa-arrow-up' => '\f062',			'fa-arrows' => '\f047',			'fa-arrows-alt' => '\f0b2',			'fa-arrows-h' => '\f07e',			'fa-arrows-v' => '\f07d',			'fa-asterisk' => '\f069',			'fa-backward' => '\f04a',			'fa-ban' => '\f05e',			'fa-bar-chart-o' => '\f080',			'fa-barcode' => '\f02a',			'fa-bars' => '\f0c9',			'fa-beer' => '\f0fc',			'fa-bell' => '\f0f3',			'fa-bell-o' => '\f0a2',			'fa-bitbucket' => '\f171',			'fa-bitbucket-square' => '\f172',			'fa-bold' => '\f032',			'fa-bolt' => '\f0e7',			'fa-book' => '\f02d',			'fa-bookmark' => '\f02e',			'fa-bookmark-o' => '\f097',			'fa-briefcase' => '\f0b1',			'fa-btc' => '\f15a',			'fa-bug' => '\f188',			'fa-building-o' => '\f0f7',			'fa-bullhorn' => '\f0a1',			'fa-bullseye' => '\f140',			'fa-calendar' => '\f073',			'fa-calendar-o' => '\f133',			'fa-camera' => '\f030',			'fa-camera-retro' => '\f083',			'fa-caret-down' => '\f0d7',			'fa-caret-left' => '\f0d9',			'fa-caret-right' => '\f0da',			'fa-caret-square-o-down' => '\f150',			'fa-caret-square-o-left' => '\f191',			'fa-caret-square-o-right' => '\f152',			'fa-caret-square-o-up' => '\f151',			'fa-caret-up' => '\f0d8',			'fa-certificate' => '\f0a3',			'fa-chain-broken' => '\f127',			'fa-check' => '\f00c',			'fa-check-circle' => '\f058',			'fa-check-circle-o' => '\f05d',			'fa-check-square' => '\f14a',			'fa-check-square-o' => '\f046',			'fa-chevron-circle-down' => '\f13a',			'fa-chevron-circle-left' => '\f137',			'fa-chevron-circle-right' => '\f138',			'fa-chevron-circle-up' => '\f139',			'fa-chevron-down' => '\f078',			'fa-chevron-left' => '\f053',			'fa-chevron-right' => '\f054',			'fa-chevron-up' => '\f077',			'fa-circle' => '\f111',			'fa-circle-o' => '\f10c',			'fa-clipboard' => '\f0ea',			'fa-clock-o' => '\f017',			'fa-cloud' => '\f0c2',			'fa-cloud-download' => '\f0ed',			'fa-cloud-upload' => '\f0ee',			'fa-code' => '\f121',			'fa-code-fork' => '\f126',			'fa-coffee' => '\f0f4',			'fa-cog' => '\f013',			'fa-cogs' => '\f085',			'fa-columns' => '\f0db',			'fa-comment' => '\f075',			'fa-comment-o' => '\f0e5',			'fa-comments' => '\f086',			'fa-comments-o' => '\f0e6',			'fa-compass' => '\f14e',			'fa-compress' => '\f066',			'fa-credit-card' => '\f09d',			'fa-crop' => '\f125',			'fa-crosshairs' => '\f05b',			'fa-css3' => '\f13c',			'fa-cutlery' => '\f0f5',			'fa-desktop' => '\f108',			'fa-dot-circle-o' => '\f192',			'fa-download' => '\f019',			'fa-dribbble' => '\f17d',			'fa-dropbox' => '\f16b',			'fa-eject' => '\f052',			'fa-ellipsis-h' => '\f141',			'fa-ellipsis-v' => '\f142',			'fa-envelope' => '\f0e0',			'fa-envelope-o' => '\f003',			'fa-eraser' => '\f12d',			'fa-eur' => '\f153',			'fa-exchange' => '\f0ec',			'fa-exclamation' => '\f12a',			'fa-exclamation-circle' => '\f06a',			'fa-exclamation-triangle' => '\f071',			'fa-expand' => '\f065',			'fa-external-link' => '\f08e',			'fa-external-link-square' => '\f14c',			'fa-eye' => '\f06e',			'fa-eye-slash' => '\f070',			'fa-facebook' => '\f09a',			'fa-facebook-square' => '\f082',			'fa-fast-backward' => '\f049',			'fa-fast-forward' => '\f050',			'fa-female' => '\f182',			'fa-fighter-jet' => '\f0fb',			'fa-file' => '\f15b',			'fa-file-o' => '\f016',			'fa-file-text' => '\f15c',			'fa-file-text-o' => '\f0f6',			'fa-files-o' => '\f0c5',			'fa-film' => '\f008',			'fa-filter' => '\f0b0',			'fa-fire' => '\f06d',			'fa-fire-extinguisher' => '\f134',			'fa-flag' => '\f024',			'fa-flag-checkered' => '\f11e',			'fa-flag-o' => '\f11d',			'fa-flask' => '\f0c3',			'fa-flickr' => '\f16e',			'fa-floppy-o' => '\f0c7',			'fa-folder' => '\f07b',			'fa-folder-o' => '\f114',			'fa-folder-open' => '\f07c',			'fa-folder-open-o' => '\f115',			'fa-font' => '\f031',			'fa-forward' => '\f04e',			'fa-foursquare' => '\f180',			'fa-frown-o' => '\f119',			'fa-gamepad' => '\f11b',			'fa-gavel' => '\f0e3',			'fa-gbp' => '\f154',			'fa-gift' => '\f06b',			'fa-github' => '\f09b',			'fa-github-alt' => '\f113',			'fa-github-square' => '\f092',			'fa-gittip' => '\f184',			'fa-glass' => '\f000',			'fa-globe' => '\f0ac',			'fa-google-plus' => '\f0d5',			'fa-google-plus-square' => '\f0d4',			'fa-h-square' => '\f0fd',			'fa-hand-o-down' => '\f0a7',			'fa-hand-o-left' => '\f0a5',			'fa-hand-o-right' => '\f0a4',			'fa-hand-o-up' => '\f0a6',			'fa-hdd-o' => '\f0a0',			'fa-headphones' => '\f025',			'fa-heart' => '\f004',			'fa-heart-o' => '\f08a',			'fa-home' => '\f015',			'fa-hospital-o' => '\f0f8',			'fa-html5' => '\f13b',			'fa-inbox' => '\f01c',			'fa-indent' => '\f03c',			'fa-info' => '\f129',			'fa-info-circle' => '\f05a',			'fa-inr' => '\f156',			'fa-instagram' => '\f16d',			'fa-italic' => '\f033',			'fa-jpy' => '\f157',			'fa-key' => '\f084',			'fa-keyboard-o' => '\f11c',			'fa-krw' => '\f159',			'fa-laptop' => '\f109',			'fa-leaf' => '\f06c',			'fa-lemon-o' => '\f094',			'fa-level-down' => '\f149',			'fa-level-up' => '\f148',			'fa-lightbulb-o' => '\f0eb',			'fa-link' => '\f0c1',			'fa-linkedin' => '\f0e1',			'fa-linkedin-square' => '\f08c',			'fa-linux' => '\f17c',			'fa-list' => '\f03a',			'fa-list-alt' => '\f022',			'fa-list-ol' => '\f0cb',			'fa-list-ul' => '\f0ca',			'fa-location-arrow' => '\f124',			'fa-lock' => '\f023',			'fa-long-arrow-down' => '\f175',			'fa-long-arrow-left' => '\f177',			'fa-long-arrow-right' => '\f178',			'fa-long-arrow-up' => '\f176',			'fa-magic' => '\f0d0',			'fa-magnet' => '\f076',			'fa-mail-reply-all' => '\f122',			'fa-male' => '\f183',			'fa-map-marker' => '\f041',			'fa-maxcdn' => '\f136',			'fa-medkit' => '\f0fa',			'fa-meh-o' => '\f11a',			'fa-microphone' => '\f130',			'fa-microphone-slash' => '\f131',			'fa-minus' => '\f068',			'fa-minus-circle' => '\f056',			'fa-minus-square' => '\f146',			'fa-minus-square-o' => '\f147',			'fa-mobile' => '\f10b',			'fa-money' => '\f0d6',			'fa-moon-o' => '\f186',			'fa-music' => '\f001',			'fa-outdent' => '\f03b',			'fa-pagelines' => '\f18c',			'fa-paperclip' => '\f0c6',			'fa-pause' => '\f04c',			'fa-pencil' => '\f040',			'fa-pencil-square' => '\f14b',			'fa-pencil-square-o' => '\f044',			'fa-phone' => '\f095',			'fa-phone-square' => '\f098',			'fa-picture-o' => '\f03e',			'fa-pinterest' => '\f0d2',			'fa-pinterest-square' => '\f0d3',			'fa-plane' => '\f072',			'fa-play' => '\f04b',			'fa-play-circle' => '\f144',			'fa-play-circle-o' => '\f01d',			'fa-plus' => '\f067',			'fa-plus-circle' => '\f055',			'fa-plus-square' => '\f0fe',			'fa-plus-square-o' => '\f196',			'fa-power-off' => '\f011',			'fa-print' => '\f02f',			'fa-puzzle-piece' => '\f12e',			'fa-qrcode' => '\f029',			'fa-question' => '\f128',			'fa-question-circle' => '\f059',			'fa-quote-left' => '\f10d',			'fa-quote-right' => '\f10e',			'fa-random' => '\f074',			'fa-refresh' => '\f021',			'fa-renren' => '\f18b',			'fa-repeat' => '\f01e',			'fa-reply' => '\f112',			'fa-reply-all' => '\f122',			'fa-retweet' => '\f079',			'fa-road' => '\f018',			'fa-rocket' => '\f135',			'fa-rss' => '\f09e',			'fa-rss-square' => '\f143',			'fa-rub' => '\f158',			'fa-scissors' => '\f0c4',			'fa-search' => '\f002',			'fa-search-minus' => '\f010',			'fa-search-plus' => '\f00e',			'fa-share' => '\f064',			'fa-share-square' => '\f14d',			'fa-share-square-o' => '\f045',			'fa-shield' => '\f132',			'fa-shopping-cart' => '\f07a',			'fa-sign-in' => '\f090',			'fa-sign-out' => '\f08b',			'fa-signal' => '\f012',			'fa-sitemap' => '\f0e8',			'fa-skype' => '\f17e',			'fa-smile-o' => '\f118',			'fa-sort' => '\f0dc',			'fa-sort-alpha-asc' => '\f15d',			'fa-sort-alpha-desc' => '\f15e',			'fa-sort-amount-asc' => '\f160',			'fa-sort-amount-desc' => '\f161',			'fa-sort-asc' => '\f0dd',			'fa-sort-desc' => '\f0de',			'fa-sort-numeric-asc' => '\f162',			'fa-sort-numeric-desc' => '\f163',			'fa-spinner' => '\f110',			'fa-square' => '\f0c8',			'fa-square-o' => '\f096', 			'fa-stack-exchange' => '\f18d',			'fa-stack-overflow' => '\f16c',			'fa-star' => '\f005',			'fa-star-half' => '\f089',			'fa-star-half-o' => '\f123',			'fa-star-o' => '\f006',			'fa-step-backward' => '\f048',			'fa-step-forward' => '\f051',			'fa-stethoscope' => '\f0f1',			'fa-stop' => '\f04d',			'fa-strikethrough' => '\f0cc',			'fa-subscript' => '\f12c',			'fa-suitcase' => '\f0f2',			'fa-sun-o' => '\f185',			'fa-superscript' => '\f12b',			'fa-table' => '\f0ce',			'fa-tablet' => '\f10a',			'fa-tachometer' => '\f0e4',			'fa-tag' => '\f02b',			'fa-tags' => '\f02c',			'fa-tasks' => '\f0ae',			'fa-terminal' => '\f120',			'fa-text-height' => '\f034',			'fa-text-width' => '\f035',			'fa-th' => '\f00a',			'fa-th-large' => '\f009',			'fa-th-list' => '\f00b',			'fa-thumb-tack' => '\f08d',			'fa-thumbs-down' => '\f165',			'fa-thumbs-o-down' => '\f088',			'fa-thumbs-o-up' => '\f087',			'fa-thumbs-up' => '\f164',			'fa-ticket' => '\f145',			'fa-times' => '\f00d',			'fa-times-circle' => '\f057',			'fa-times-circle-o' => '\f05c',			'fa-tint' => '\f043',			'fa-trash-o' => '\f014',			'fa-trello' => '\f181',			'fa-trophy' => '\f091',			'fa-truck' => '\f0d1',			'fa-try' => '\f195',			'fa-tumblr' => '\f173',			'fa-tumblr-square' => '\f174',			'fa-twitter' => '\f099',			'fa-twitter-square' => '\f081',			'fa-umbrella' => '\f0e9',			'fa-underline' => '\f0cd',			'fa-undo' => '\f0e2',			'fa-unlock' => '\f09c',			'fa-unlock-alt' => '\f13e',			'fa-upload' => '\f093',			'fa-usd' => '\f155',			'fa-user' => '\f007',			'fa-user-md' => '\f0f0',			'fa-users' => '\f0c0',			'fa-video-camera' => '\f03d',			'fa-vimeo-square' => '\f194',			'fa-vk' => '\f189',			'fa-volume-down' => '\f027',			'fa-volume-off' => '\f026',			'fa-volume-up' => '\f028',			'fa-weibo' => '\f18a',			'fa-wheelchair' => '\f193',			'fa-windows' => '\f17a',			'fa-wrench' => '\f0ad',			'fa-xing' => '\f168',			'fa-xing-square' => '\f169',			'fa-youtube' => '\f167',			'fa-youtube-play' => '\f16a',			'fa-youtube-square' => '\f166',		);		return $icons;	}}function vc_taxonomy_form_field($settings, $value) {	$dependency = vc_generate_dependencies_attributes($settings);	$terms_fields = array();	$terms_slugs = array();	$value_arr = $value;	if ( !is_array($value_arr) ) {		$value_arr = array_map( 'trim', explode(',', $value_arr) );	}	if ( !empty($settings['taxonomy']) ) {		$terms = get_terms( $settings['taxonomy'] );		if ( $terms && !is_wp_error($terms) ) {			foreach( $terms as $term ) {				$terms_slugs[] = $term->slug;				$terms_fields[] = sprintf(					'<option id="%s" class="%s" value="%s" %s>%s</option>',					$settings['param_name'] . '-' . $term->slug,					$settings['param_name'].' '.$settings['type'],					$term->slug,					selected( in_array( $term->slug, $value_arr ), true, false ),					$term->name				);			}		}	}	return 	'<select name="'.$settings['param_name'].'" class="wpb_vc_param_value wpb-input wpb-select dropdown">'			. '<option value="">--All--</option>'			. implode( $terms_fields ) 			. '</select>';}WpbakeryShortcodeParams::addField('wd_taxonomy', 'vc_taxonomy_form_field');function wd_vc_attach_images_form_field( $settings, $value, $single = false ) {	$output = '';	$param_value = wpb_removeNotExistingImgIDs( $value );	$output .= '<input type="hidden" class="wpb_vc_param_value gallery_widget_attached_images_ids '	           . $settings['param_name'] . ' '	           . $settings['type'] . '" name="' . $settings['param_name'] . '" value="' . $value . '"/>';	$output .= '<div class="gallery_widget_attached_images">';	$output .= '<ul class="gallery_widget_attached_images_list">';	$output .= ( $param_value != '' ) ? fieldAttachedImages( explode( ",", $value ) ) : '';	$output .= '</ul>';	$output .= '</div>';	$output .= '<div class="gallery_widget_site_images">';	$output .= '</div>';	if ( $single === true ) {		$output .= '<a class="gallery_widget_add_images" href="#" use-single="true" title="'		           . __( 'Add image', 'wpdance' ) . '">' . __( 'Add image', 'wpdance' ) . '</a>'; //class: button	} else {		$output .= '<a class="gallery_widget_add_images" href="#" title="'		           . __( 'Add images', 'wpdance' ) . '">' . __( 'Add images', 'wpdance' ) . '</a>'; //class: button	}	return $output;}function wd_taxonomy_cat_group_content($param_name, $value, $terms_fields){	ob_start();	?>	<div class="wd_tax_cat_group_control" style="display: table;">		<div class="wpb_el_type_attach_image" style="display: table-cell;width: 183px;">			<input type="hidden" class="wd_tax_cat_group_img_id wpb_vc_param_value gallery_widget_attached_images_ids" value="<?php echo esc_attr($value);?>"/>			<div class="gallery_widget_attached_images">				<ul class="gallery_widget_attached_images_list">					<?php echo ( $param_value != '' ) ? fieldAttachedImages( explode( ",", $value ) ) : '';?>				</ul>			</div>			<div class="gallery_widget_site_images"></div>			<a class="gallery_widget_add_images" href="#" use-single="true" title="<?php esc_attr_e( 'Add image', "wpdance" )?>"><?php echo __( 'Add image', "wpdance" )?></a>		</div>		<div class="wpb_el_type_attach_select" style="display: table-cell;vertical-align: top;">			<select class="wd_tax_cat_group_select wpb_vc_param_value wpb-input wpb-select dropdown">				<?php echo implode( $terms_fields );?>			</select>		</div>		<input type="hidden" name="<?php echo $param_name;?>[]" class="wpb_vc_param_value gallery_widget_attached_images_ids" value="<?php echo esc_attr($value);?>"/>	</div>	<?php 	return ob_get_clean();}function vc_taxonomy_cat_group($settings, $value, $tag) {	$dependency = vc_generate_dependencies_attributes($settings);	$res = '';	$terms_fields = array();	$terms_slugs = array();	$value_arr = $value;	if ( !is_array($value_arr) ) {		$value_arr = array_map( 'trim', explode(',', $value_arr) );	}	if ( !empty($settings['taxonomy']) ) {		$terms = get_terms( $settings['taxonomy'] );		if ( $terms && !is_wp_error($terms) ) {			foreach( $terms as $term ) {				$terms_slugs[] = $term->slug;				$terms_fields[] = sprintf(					'<option id="%s" class="%s" value="%s" %s>%s</option>',					$settings['param_name'] . '-' . $term->slug,					$settings['param_name'].' '.$settings['type'],					$term->slug,					selected( in_array( $term->slug, $value_arr ), true, false ),					$term->name				);			}		}	}		ob_start();		$param_value = wpb_removeNotExistingImgIDs( $value );	?>	<div class="wd_tax_cat_group">		<div class="wpb_el_type_attach_select_tmp" style="display: none;">			<select class="wd_tax_cat_group_select wpb_vc_param_value wpb-input wpb-select dropdown">				<option value=""><?php _e('-- Choose category --');?></option>				<?php echo implode( $terms_fields );?>			</select>		</div>		<div class="wd_tax_cat_group_control">			<div class="wpb_el_type_attach_image" style="width: 100%; overflow: hidden;">				<input type="hidden" class="wd_tax_cat_group_img_id wpb_vc_param_value gallery_widget_attached_images_ids" value="<?php echo esc_attr($value);?>"/>				<div class="gallery_widget_attached_images">					<ul class="gallery_widget_attached_images_list">						<?php echo ( $param_value != '' ) ? fieldAttachedImages( explode( ",", $value ) ) : '';?>					</ul>				</div>				<div class="gallery_widget_site_images"></div>				<a class="gallery_widget_add_images" href="#" title="<?php esc_attr_e( 'Add image', "wpdance" )?>"><?php echo __( 'Add image', "wpdance" )?></a>			</div>			<div class="wpb_el_type_attach_select"></div>			<div class="wpb_el_type_attach_text" style="margin-top: 10px;">				<textarea name="<?php echo esc_attr($settings['param_name']);?>" class="wd_tax_cat_group_value wpb_vc_param_value wpb-textinput title textfield" placeholder="<?php echo esc_attr('Enter cat slug list, divide values with comma (,)');?>" rows="5"><?php echo $value;?></textarea>			</div>		</div>	</div>	<script type="text/javascript">		jQuery(document).ready(function(){			var select_ = jQuery('.wd_tax_cat_group .wpb_el_type_attach_select_tmp select').html();			jQuery('body').on('change', '.wd_tax_cat_group .wd_tax_cat_group_img_id', function(){				var img_str = jQuery(this).val();				var img_args = img_str.split(",");				img_str = img_str.replace(/,/g, '|\n')+ '|';				var this_ = jQuery(this);				this_.parents('.wd_tax_cat_group_control').find('.wpb_el_type_attach_select').html('');				console.log(img_args);				jQuery.each(img_args, function(i,val){					if(val.length > 0)					this_.parents('.wd_tax_cat_group_control').find('.wpb_el_type_attach_select').append('\					<select class="wd_tax_cat_group_select wpb_vc_param_value wpb-input wpb-select dropdown" data-img_id="'+val+'">\						'+select_+'\					</select>\					');				});				jQuery(this).parents('.wd_tax_cat_group').find('.wd_tax_cat_group_value').val(img_str);			});						jQuery('body').on('change', '.wd_tax_cat_group .wd_tax_cat_group_select', function(){							});					});	</script>	<?php 	$res = ob_get_clean();		return $res;}WpbakeryShortcodeParams::addField('wd_tax_cat_group', 'vc_taxonomy_cat_group');function vc_slider_form_field($settings, $value) {	$dependency = vc_generate_dependencies_attributes($settings);	$terms_fields = array();	$terms_slugs = array();	$value_arr = $value;	if ( !is_array($value_arr) ) {		$value_arr = array_map( 'trim', explode(',', $value_arr) );	}	if ( !empty($settings['taxonomy']) ) {		$taxonomy =  $settings['taxonomy'];		switch($taxonomy){			case 'revolution':				$slider = new RevSlider();				$arrSliders = $slider->getArrSlidersShort();				$sliderID = $datas['page_revolution'];				$select = UniteFunctionsRev::getHTMLSelect($arrSliders, $sliderID,' name="revolution" class="wpb_vc_param_value wpb-input wpb-select dropdown"', true);			break;		}	}	return 	'<select name="'.$settings['param_name'].'" class="wpb_vc_param_value wpb-input wpb-select dropdown">'			. '<option value=""></option>'			. implode( $terms_fields ) 			. '</select>';}if (!function_exists('wd_hex2rgb')) {	function wd_hex2rgb($hex) {	   $hex = str_replace("#", "", $hex);	   if(strlen($hex) == 3) {		  $r = hexdec(substr($hex,0,1).substr($hex,0,1));		  $g = hexdec(substr($hex,1,1).substr($hex,1,1));		  $b = hexdec(substr($hex,2,1).substr($hex,2,1));	   } else {		  $r = hexdec(substr($hex,0,2));		  $g = hexdec(substr($hex,2,2));		  $b = hexdec(substr($hex,4,2));	   }	   $rgb = array($r, $g, $b);	   return $rgb; 	}}function wd_stylesheet_get_opacity( $opacity = 0 ) {	$opacity = ($opacity > 0) ? $opacity/100 : 0;	return $opacity;}function wd_stylesheet_color_hex2rgb( $_color, $raw = false ) {        if( is_array($_color) ) {        $rgb_array = array_map('intval', $_color);        }else {        $color = str_replace( '#', '', trim($_color) );        if ( count($color) < 6 ) {            $color .= $color;        }        $rgb_array = sscanf($color, '%2x%2x%2x');             if( is_array($rgb_array) && count($rgb_array) == 3 ) {            $rgb_array = array_map('absint', $rgb_array);        }else {            return '';        }    }    if ( !$raw ) {        return sprintf( 'rgb(%d,%d,%d)', $rgb_array[0], $rgb_array[1], $rgb_array[2] );    }    return $rgb_array;}function wd_stylesheet_color_hex2rgba( $color, $opacity = 0 ) {    if ( !$color ) return '';    $rgb_array = wd_stylesheet_color_hex2rgb( $color, true );    return sprintf( 'rgba(%d,%d,%d,%s)', $rgb_array[0], $rgb_array[1], $rgb_array[2], wd_stylesheet_get_opacity( $opacity ) );}function wd_register_custom_vc_scripts() {	wp_register_script('vc_wd_pie', THEME_EXTENDS_EXTENDVC_URI . '/vc_extend/jquery.vc_chart.js', array('jquery', 'waypoints', 'progressCircle'));}add_action('wp_enqueue_scripts', 'wd_register_custom_vc_scripts', 15);if ( !function_exists('presscore_get_default_image') ){	function presscore_get_default_image() {		return array( THEME_URI . '/images/noimage.jpg', 1000, 1000 );	}}if ( !function_exists('wd_get_thumb_img') ){	function wd_get_thumb_img( $opts = array() ) {		global $post;		$default_image = presscore_get_default_image();		$defaults = array(			'wrap'				=> '<a %HREF% %CLASS% %TITLE% %CUSTOM%><img %SRC% %IMG_CLASS% %SIZE% %ALT% %IMG_TITLE% /></a>',			'class'         	=> '',			'alt'				=> '',			'title'         	=> '',			'custom'        	=> '',			'img_class'     	=> '',			'img_title'			=> '',			'img_description'	=> '',			'img_caption'		=> '',			'href'				=> '',			'img_meta'      	=> array(),			'img_id'			=> 0,			'options'    		=> array(),			'default_img'		=> $default_image,			'prop'				=> false,			'echo'				=> true		);		$opts = wp_parse_args( $opts, $defaults );		$opts = apply_filters('wd_get_thumb_img-args', $opts);		$original_image = null;		if ( $opts['img_meta'] ) {			$original_image = $opts['img_meta'];		} elseif ( $opts['img_id'] ) {			$original_image = wp_get_attachment_image_src( $opts['img_id'], 'full' );		}		if ( !$original_image ) {			$original_image = $opts['default_img'];		}		if ( $original_image && !empty($opts['prop']) && ( empty($opts['options']['h']) || empty($opts['options']['w']) ) ) {			$_prop = $opts['prop'];			$_img_meta = $original_image;			if ( $_prop > 1 ) {				$h = intval(floor($_img_meta[1] / $_prop));				$w = intval(floor($_prop * $h));			} else if ( $_prop < 1 ) {				$w = intval(floor($_prop * $_img_meta[2]));				$h = intval(floor($w / $_prop));			} else {				$w = $h = min($_img_meta[1], $_img_meta[2]);			}			if ( !empty($opts['options']['w']) ) {				$__prop = $h / $w;				$w = intval($opts['options']['w']);				$h = intval(floor($__prop * $w));			} else if ( !empty($opts['options']['h']) ) {				$__prop = $w / $h;				$h = intval($opts['options']['h']);				$w = intval(floor($__prop * $h));			}			$opts['options']['w'] = $w;			$opts['options']['h'] = $h;		}		if ( $opts['options'] ) {			$resized_image = dt_get_resized_img( $original_image, $opts['options'] );		} else {			$resized_image = $original_image;		}		if ( $img_id = absint( $opts['img_id'] ) ) {			if ( '' === $opts['alt'] ) {				$opts['alt'] = get_post_meta( $img_id, '_wp_attachment_image_alt', true );			}			if ( '' === $opts['img_title'] ) {				$opts['img_title'] = get_the_title( $img_id );			}		}		$class = empty( $opts['class'] ) ? '' : 'class="' . esc_attr( trim($opts['class']) ) . '"';		$title = empty( $opts['title'] ) ? '' : 'title="' . esc_attr( trim($opts['title']) ) . '"';		$img_title = empty( $opts['img_title'] ) ? '' : 'title="' . esc_attr( trim($opts['img_title']) ) . '"';		$img_class = empty( $opts['img_class'] ) ? '' : 'class="' . esc_attr( trim($opts['img_class']) ) . '"';		$href = $opts['href'];		if ( !$href ) {			$href = $original_image[0];		}		$src = $resized_image[0];		if ( empty($resized_image[3]) || !is_string($resized_image[3]) ) {			$size = image_hwstring($resized_image[1], $resized_image[2]);		} else {			$size = $resized_image[3];		}		$output = str_replace(			array(				'%HREF%',				'%CLASS%',				'%TITLE%',				'%CUSTOM%',				'%SRC%',				'%IMG_CLASS%',				'%SIZE%',				'%ALT%',				'%IMG_TITLE%',				'%RAW_TITLE%',				'%RAW_ALT%',				'%RAW_IMG_TITLE%',				'%RAW_IMG_DESCRIPTION%',				'%RAW_IMG_CAPTION'			),			array(				'href="' . esc_url( $href ) . '"',				$class,				$title,				strip_tags( $opts['custom'] ),				'src="' . esc_url( $src ) . '"',				$img_class,				$size,				'alt="' . esc_attr( $opts['alt'] ) . '"',				$img_title,				esc_attr( $opts['title'] ),				esc_attr( $opts['alt'] ),				esc_attr( $opts['img_title'] ),				esc_attr( $opts['img_description'] ),				esc_attr( $opts['img_caption'] )			),			$opts['wrap']		);		if ( $opts['echo'] ) {			echo $output;			return '';		}		return $output;	}}if ( ! function_exists( 'presscore_get_team_links_array' ) ) {	function presscore_get_team_links_array() {		$team_links =  array(			'link'		=> array( 'desc' => _x( 'Personal blog / website', 'Personal blog / website', 'wpdance' ) ),			'envelope'	=> array( 'desc' => _x( 'E-mail', 'E-mail', 'wpdance' ) ),		);		$common_links = presscore_get_social_icons_data();		if ( $common_links ) {			foreach ( $common_links as $key=>$value ) {				if ( isset($team_links[ $key ]) ) {					continue;				}				$team_links[ $key ] = array( 'desc' => $value );			}		}		return $team_links;	}} if ( ! function_exists( 'presscore_get_social_icons_data' ) ) {	function presscore_get_social_icons_data() {		return array(			'facebook'		=> __('Facebook', 'wpdance'),			'twitter'		=> __('Twitter', 'wpdance'),			'google-plus'		=> __('Google+', 'wpdance'),			'pinterest'		=> __('Pinterest', 'wpdance'),		);	}} if ( ! function_exists( 'presscore_get_social_icon' ) ) {	function presscore_get_social_icon( $icon, $url, $title = '', $classes = array(), $target = '_blank' ) {		if ( 'skype' == $icon ) {			$url = esc_attr( $url );		} else if ( 'envelope' == $icon && is_email($url) ) {			$url = 'mailto:' . esc_attr($url);			$target = '_top';		} else {			$url = esc_url( $url );		}		$classes[] = $icon;		$output = sprintf(			'<a title="%2$s" target="%4$s" href="%1$s" class="%3$s"><i class="fa fa-%3$s"></i></a>',			$url,			esc_attr( $title ),			esc_attr( implode( ' ',  $classes ) ),			$target		);		return $output;	}} if (!function_exists('getAnimationtype')){	function getAnimationtype(){		$animation_types = array(			"bounce"=>"bounce",			"flash"=>"flash",			"pulse"=>"pulse",			"rubberBand"=>"rubberBand",			"shake"=>"shake",			"swing"=>"swing",			"tada"=>"tada",			"wobble"=>"wobble",			"bounceIn"=>"bounceIn",			"bounceInDown"=>"bounceInDown",			"bounceInLeft"=>"bounceInLeft",			"bounceInRight"=>"bounceInRight",			"bounceInUp"=>"bounceInUp",			"bounceOut"=>"bounceOut",			"bounceOutDown"=>"bounceOutDown",			"bounceOutLeft"=>"bounceOutLeft",			"bounceOutRight"=>"bounceOutRight",			"bounceOutUp"=>"bounceOutUp",			"fadeIn"=>"fadeIn",			"fadeInDown"=>"fadeInDown",			"fadeInDownBig"=>"fadeInDownBig",			"fadeInLeft"=>"fadeInLeft",			"fadeInLeftBig"=>"fadeInLeftBig",			"fadeInRight"=>"fadeInRight",			"fadeInRightBig"=>"fadeInRightBig",			"fadeInUp"=>"fadeInUp",			"fadeInUpBig"=>"fadeInUpBig",			"fadeOut"=>"fadeOut",			"fadeOutDown"=>"fadeOutDown",			"fadeOutDownBig"=>"fadeOutDownBig",			"fadeOutLeft"=>"fadeOutLeft",			"fadeOutLeftBig"=>"fadeOutLeftBig",			"fadeOutRight"=>"fadeOutRight",			"fadeOutRightBig"=>"fadeOutRightBig",			"fadeOutUp"=>"fadeOutUp",			"fadeOutUpBig"=>"fadeOutUpBig",			"flip"=>"flip",			"flipInX"=>"flipInX",			"flipInY"=>"flipInY",			"flipOutX"=>"flipOutX",			"flipOutY"=>"flipOutY",			"lightSpeedIn"=>"lightSpeedIn",			"lightSpeedOut"=>"lightSpeedOut",			"rotateIn"=>"rotateIn",			"rotateInDownLeft"=>"rotateInDownLeft",			"rotateInDownRight"=>"rotateInDownRight",			"rotateInUpLeft"=>"rotateInUpLeft",			"rotateInUpRight"=>"rotateInUpRight",			"rotateOut"=>"rotateOut",			"rotateOutDownLeft"=>"rotateOutDownLeft",			"rotateOutDownRight"=>"rotateOutDownRight",			"rotateOutUpLeft"=>"rotateOutUpLeft",			"rotateOutUpRight"=>"rotateOutUpRight",			"slideInDown"=>"slideInDown",			"slideInLeft"=>"slideInLeft",			"slideInRight"=>"slideInRight",			"slideOutLeft"=>"slideOutLeft",			"slideOutRight"=>"slideOutRight",			"slideOutUp"=>"slideOutUp",			"hinge"=>"hinge",			"rollIn"=>"rollIn",			"rollOut"=>"rollOut",		);				return $animation_types;	}}global $wd_effect_arg;$wd_effect_arg = getAnimationtype();?>